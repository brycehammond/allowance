@page "/children/create"
@attribute [Microsoft.AspNetCore.Authorization.Authorize(Roles = "Parent")]
@using AllowanceTracker.DTOs
@using AllowanceTracker.Services
@using System.ComponentModel.DataAnnotations
@inject IAccountService AccountService
@inject NavigationManager Navigation

<PageTitle>Add Child - Allowance Tracker</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3>Add New Child</h3>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @ErrorMessage
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(SuccessMessage))
                    {
                        <div class="alert alert-success" role="alert">
                            @SuccessMessage
                        </div>
                    }

                    <EditForm Model="@Model" OnValidSubmit="@HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <InputText @bind-Value="Model.Email" class="form-control" />
                            <ValidationMessage For="@(() => Model.Email)" />
                            <small class="form-text text-muted">Child will use this email to log in</small>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <InputText type="password" @bind-Value="Model.Password" class="form-control" />
                            <ValidationMessage For="@(() => Model.Password)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">First Name</label>
                            <InputText @bind-Value="Model.FirstName" class="form-control" />
                            <ValidationMessage For="@(() => Model.FirstName)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Last Name</label>
                            <InputText @bind-Value="Model.LastName" class="form-control" />
                            <ValidationMessage For="@(() => Model.LastName)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Weekly Allowance</label>
                            <InputNumber @bind-Value="Model.WeeklyAllowance" class="form-control" />
                            <ValidationMessage For="@(() => Model.WeeklyAllowance)" />
                            <small class="form-text text-muted">Amount to be paid automatically every week</small>
                        </div>

                        <div class="d-flex gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@IsProcessing">
                                @if (IsProcessing)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                    <span>Adding Child...</span>
                                }
                                else
                                {
                                    <span>Add Child</span>
                                }
                            </button>
                            <a href="/dashboard" class="btn btn-secondary">Cancel</a>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private CreateChildModel Model = new();
    private bool IsProcessing = false;
    private string? ErrorMessage;
    private string? SuccessMessage;

    private async Task HandleSubmit()
    {
        IsProcessing = true;
        ErrorMessage = null;
        SuccessMessage = null;

        try
        {
            // Get current user's family ID
            var currentUser = await AccountService.GetCurrentUserAsync();
            if (currentUser?.FamilyId == null)
            {
                ErrorMessage = "No family found. Please contact support.";
                return;
            }

            var dto = new RegisterChildDto(
                Model.Email,
                Model.Password,
                Model.FirstName,
                Model.LastName,
                Model.WeeklyAllowance);

            var result = await AccountService.RegisterChildAsync(dto, currentUser.FamilyId.Value);

            if (result.Succeeded)
            {
                SuccessMessage = $"{Model.FirstName} has been added successfully!";
                Model = new CreateChildModel(); // Reset form

                // Redirect to dashboard after 2 seconds
                await Task.Delay(2000);
                Navigation.NavigateTo("/dashboard", forceLoad: true);
            }
            else
            {
                ErrorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "An error occurred while adding the child. Please try again.";
        }
        finally
        {
            IsProcessing = false;
        }
    }

    private class CreateChildModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "First name is required")]
        [StringLength(50)]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Last name is required")]
        [StringLength(50)]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Weekly allowance is required")]
        [Range(0, 10000, ErrorMessage = "Weekly allowance must be between $0 and $10,000")]
        public decimal WeeklyAllowance { get; set; } = 10.00m;
    }
}
