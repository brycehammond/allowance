@page "/children/create"
@attribute [Microsoft.AspNetCore.Authorization.Authorize(Roles = "Parent")]
@using AllowanceTracker.DTOs
@using AllowanceTracker.Models
@using AllowanceTracker.Services
@using System.ComponentModel.DataAnnotations
@inject IAccountService AccountService
@inject NavigationManager Navigation

<PageTitle>Add Child - Allowance Tracker</PageTitle>

<div class="min-h-screen bg-gradient-to-br from-green-50 to-green-100 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-2xl mx-auto">
        <!-- Header -->
        <div class="text-center mb-8">
            <h2 class="text-4xl font-bold text-gray-900 mb-2">Add New Child</h2>
            <p class="text-gray-600">Create a new account for your child to start tracking their allowance</p>
        </div>

        <!-- Form Card -->
        <div class="card-elevated">
            <div class="space-y-6">
                @if (!string.IsNullOrEmpty(SuccessMessage))
                {
                    <div class="bg-green-50 border-l-4 border-green-500 p-4 rounded">
                        <div class="flex">
                            <svg class="h-5 w-5 text-green-500 mr-2" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                            </svg>
                            <p class="text-sm text-green-700">@SuccessMessage</p>
                        </div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="bg-red-50 border-l-4 border-red-500 p-4 rounded">
                        <div class="flex">
                            <svg class="h-5 w-5 text-red-500 mr-2" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                            </svg>
                            <p class="text-sm text-red-700">@ErrorMessage</p>
                        </div>
                    </div>
                }

                <EditForm Model="@Model" OnValidSubmit="@HandleSubmit">
                    <DataAnnotationsValidator />

                    <div class="space-y-5">
                        <!-- Name Fields (side by side) -->
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label class="form-label">First Name</label>
                                <div class="relative">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                        </svg>
                                    </div>
                                    <InputText @bind-Value="Model.FirstName"
                                              class="form-input pl-10"
                                              placeholder="Emma" />
                                </div>
                                <ValidationMessage For="@(() => Model.FirstName)" class="form-error" />
                            </div>

                            <div>
                                <label class="form-label">Last Name</label>
                                <div class="relative">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                        </svg>
                                    </div>
                                    <InputText @bind-Value="Model.LastName"
                                              class="form-input pl-10"
                                              placeholder="Smith" />
                                </div>
                                <ValidationMessage For="@(() => Model.LastName)" class="form-error" />
                            </div>
                        </div>

                        <!-- Email -->
                        <div>
                            <label class="form-label">Email Address</label>
                            <div class="relative">
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207" />
                                    </svg>
                                </div>
                                <InputText @bind-Value="Model.Email"
                                          class="form-input pl-10"
                                          placeholder="emma@example.com" />
                            </div>
                            <ValidationMessage For="@(() => Model.Email)" class="form-error" />
                            <p class="form-helper">Child will use this email to log in</p>
                        </div>

                        <!-- Password -->
                        <div>
                            <label class="form-label">Password</label>
                            <div class="relative">
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                                    </svg>
                                </div>
                                <InputText type="password"
                                          @bind-Value="Model.Password"
                                          class="form-input pl-10"
                                          placeholder="••••••••" />
                            </div>
                            <ValidationMessage For="@(() => Model.Password)" class="form-error" />
                            <p class="form-helper">Minimum 6 characters</p>
                        </div>

                        <!-- Weekly Allowance -->
                        <div>
                            <label class="form-label">Weekly Allowance</label>
                            <div class="relative">
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                    </svg>
                                </div>
                                <InputNumber @bind-Value="Model.WeeklyAllowance"
                                            class="form-input pl-10"
                                            placeholder="10.00" />
                            </div>
                            <ValidationMessage For="@(() => Model.WeeklyAllowance)" class="form-error" />
                            <p class="form-helper">Amount to be paid automatically every week</p>
                        </div>

                        <!-- Savings Settings -->
                        <div class="border-t border-gray-200 pt-5 mt-5">
                            <div class="flex items-center justify-between mb-4">
                                <div>
                                    <h3 class="text-lg font-semibold text-gray-900">Savings Account</h3>
                                    <p class="text-sm text-gray-500">Automatically transfer a portion of allowance to savings</p>
                                </div>
                                <InputCheckbox @bind-Value="Model.SavingsAccountEnabled"
                                              class="h-6 w-6 text-green-600 focus:ring-green-500 border-gray-300 rounded" />
                            </div>

                            @if (Model.SavingsAccountEnabled)
                            {
                                <div class="space-y-4 pl-4 border-l-2 border-green-200">
                                    <!-- Transfer Type Toggle -->
                                    <div>
                                        <label class="form-label">Transfer Type</label>
                                        <div class="grid grid-cols-2 gap-2">
                                            <button type="button"
                                                    @onclick="() => Model.SavingsTransferType = SavingsTransferType.Percentage"
                                                    class="@(Model.SavingsTransferType == SavingsTransferType.Percentage ? "btn-primary" : "btn-secondary") py-3">
                                                Percentage
                                            </button>
                                            <button type="button"
                                                    @onclick="() => Model.SavingsTransferType = SavingsTransferType.FixedAmount"
                                                    class="@(Model.SavingsTransferType == SavingsTransferType.FixedAmount ? "btn-primary" : "btn-secondary") py-3">
                                                Fixed Amount
                                            </button>
                                        </div>
                                    </div>

                                    @if (Model.SavingsTransferType == SavingsTransferType.Percentage)
                                    {
                                        <!-- Percentage Input -->
                                        <div>
                                            <label class="form-label">Savings Percentage</label>
                                            <div class="relative">
                                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                                    <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                                                    </svg>
                                                </div>
                                                <InputNumber @bind-Value="Model.SavingsTransferPercentage"
                                                            class="form-input pl-10"
                                                            placeholder="20" />
                                                <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                                                    <span class="text-gray-500">%</span>
                                                </div>
                                            </div>
                                            <ValidationMessage For="@(() => Model.SavingsTransferPercentage)" class="form-error" />
                                            <p class="form-helper">Percentage of allowance to transfer (0-100%)</p>
                                        </div>
                                    }
                                    else
                                    {
                                        <!-- Fixed Amount Input -->
                                        <div>
                                            <label class="form-label">Savings Amount</label>
                                            <div class="relative">
                                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                                    <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 8h6m-5 0a3 3 0 110 6H9l3 3m-3-6h6m6 1a9 9 0 11-18 0 9 9 0 0118 0z" />
                                                    </svg>
                                                </div>
                                                <InputNumber @bind-Value="Model.SavingsTransferAmount"
                                                            class="form-input pl-10"
                                                            placeholder="5.00" />
                                            </div>
                                            <ValidationMessage For="@(() => Model.SavingsTransferAmount)" class="form-error" />
                                            <p class="form-helper">Fixed amount to transfer from each allowance</p>
                                        </div>
                                    }
                                </div>
                            }
                        </div>

                        <!-- Action Buttons -->
                        <div class="flex gap-3 pt-4">
                            <button type="submit"
                                    class="btn-primary flex-1 text-lg py-4"
                                    disabled="@IsProcessing">
                                @if (IsProcessing)
                                {
                                    <span class="flex items-center justify-center">
                                        <span class="spinner mr-2"></span>
                                        <span>Adding Child...</span>
                                    </span>
                                }
                                else
                                {
                                    <span class="flex items-center justify-center">
                                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
                                        </svg>
                                        <span>Add Child</span>
                                    </span>
                                }
                            </button>
                            <a href="/dashboard" class="btn-secondary flex-1 text-lg py-4 flex items-center justify-center">
                                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                </svg>
                                <span>Cancel</span>
                            </a>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private CreateChildModel Model = new();
    private bool IsProcessing = false;
    private string? ErrorMessage;
    private string? SuccessMessage;

    private async Task HandleSubmit()
    {
        IsProcessing = true;
        ErrorMessage = null;
        SuccessMessage = null;

        try
        {
            // Get current user's family ID
            var currentUser = await AccountService.GetCurrentUserAsync();
            if (currentUser?.FamilyId == null)
            {
                ErrorMessage = "No family found. Please contact support.";
                return;
            }

            var dto = new RegisterChildDto(
                Model.Email,
                Model.Password,
                Model.FirstName,
                Model.LastName,
                Model.WeeklyAllowance,
                Model.SavingsAccountEnabled,
                Model.SavingsTransferType,
                Model.SavingsTransferPercentage,
                Model.SavingsTransferAmount);

            var result = await AccountService.RegisterChildAsync(dto, currentUser.FamilyId.Value);

            if (result.Succeeded)
            {
                SuccessMessage = $"{Model.FirstName} has been added successfully!";
                Model = new CreateChildModel(); // Reset form

                // Redirect to dashboard after 2 seconds
                await Task.Delay(2000);
                Navigation.NavigateTo("/dashboard", forceLoad: true);
            }
            else
            {
                ErrorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "An error occurred while adding the child. Please try again.";
        }
        finally
        {
            IsProcessing = false;
        }
    }

    private class CreateChildModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "First name is required")]
        [StringLength(50)]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Last name is required")]
        [StringLength(50)]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Weekly allowance is required")]
        [Range(0, 10000, ErrorMessage = "Weekly allowance must be between $0 and $10,000")]
        public decimal WeeklyAllowance { get; set; } = 10.00m;

        public bool SavingsAccountEnabled { get; set; } = false;

        public SavingsTransferType SavingsTransferType { get; set; } = SavingsTransferType.Percentage;

        [Range(0, 100, ErrorMessage = "Percentage must be between 0 and 100")]
        public decimal? SavingsTransferPercentage { get; set; } = 20m;

        [Range(0, 10000, ErrorMessage = "Amount must be between $0 and $10,000")]
        public decimal? SavingsTransferAmount { get; set; } = 2.00m;
    }
}
