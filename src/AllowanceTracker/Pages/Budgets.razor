@page "/budgets"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@using AllowanceTracker.Components
@using AllowanceTracker.DTOs
@using AllowanceTracker.Services
@inject IFamilyService FamilyService

<PageTitle>Budget Management</PageTitle>

<!-- Page Header -->
<div class="mb-8">
    <div class="flex items-center justify-between">
        <div>
            <h1 class="text-3xl font-bold text-gray-900">Budget Management</h1>
            <p class="mt-2 text-sm text-gray-600">Set and manage spending budgets for each category</p>
        </div>
        <a href="/dashboard" class="btn-secondary inline-flex items-center gap-2">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
            </svg>
            <span>Back to Dashboard</span>
        </a>
    </div>
</div>

@if (IsLoading)
{
    <div class="flex items-center justify-center py-12">
        <div class="text-center">
            <div class="inline-block spinner h-8 w-8 text-green-600 mb-4"></div>
            <p class="text-gray-500">Loading children...</p>
        </div>
    </div>
}
else if (!Children.Any())
{
    <div class="text-center py-12">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
        </svg>
        <h3 class="mt-2 text-sm font-semibold text-gray-900">No children yet</h3>
        <p class="mt-1 text-sm text-gray-500">Add a child to start managing budgets.</p>
        <div class="mt-6">
            <a href="/children/create" class="btn-primary">
                Add Child
            </a>
        </div>
    </div>
}
else
{
    <div class="space-y-6">
        <!-- Child Selector -->
        <div class="card">
            <label for="child-selector" class="form-label">Select Child</label>
            <select id="child-selector" class="form-input" @bind="SelectedChildId" @bind:after="OnChildSelected">
                <option value="">-- Choose a child --</option>
                @foreach (var child in Children)
                {
                    <option value="@child.Id">@child.FirstName @child.LastName</option>
                }
            </select>
            @if (SelectedChild != null)
            {
                <p class="form-helper mt-2">
                    Current Balance: <span class="font-mono font-semibold text-primary">$@SelectedChild.CurrentBalance.ToString("F2")</span>
                </p>
            }
        </div>

        <!-- Budget Management Component -->
        @if (SelectedChildId != Guid.Empty)
        {
            <BudgetManagement ChildId="@SelectedChildId" />
        }
        else
        {
            <div class="text-center py-12 bg-gray-50 rounded-lg border-2 border-dashed border-gray-300">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                </svg>
                <p class="mt-2 text-sm text-gray-500">Select a child above to manage their budgets</p>
            </div>
        }
    </div>
}

@code {
    private bool IsLoading = true;
    private List<ChildDto> Children = new();
    private Guid SelectedChildId = Guid.Empty;
    private ChildDto? SelectedChild => Children.FirstOrDefault(c => c.Id == SelectedChildId);

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        Children = await FamilyService.GetChildrenAsync();

        // Auto-select first child if only one exists
        if (Children.Count == 1)
        {
            SelectedChildId = Children[0].Id;
        }

        IsLoading = false;
    }

    private void OnChildSelected()
    {
        // Trigger re-render when child selection changes
        StateHasChanged();
    }
}
