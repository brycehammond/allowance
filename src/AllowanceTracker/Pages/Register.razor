@page "/register"
@layout AuthLayout
@using AllowanceTracker.DTOs
@using AllowanceTracker.Services
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@inject IAccountService AccountService
@inject NavigationManager Navigation

<PageTitle>Register - Allowance Tracker</PageTitle>

<div class="min-h-screen flex items-center justify-center bg-gradient-to-br from-green-50 to-green-100 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
        <!-- Header -->
        <div class="text-center">
            <h2 class="text-4xl font-bold text-gray-900 mb-2">Allowance Tracker</h2>
            <p class="text-gray-600">Create your family account</p>
        </div>

        <!-- Registration Card -->
        <div class="card-elevated">
            <div class="space-y-6">
                <div>
                    <h3 class="text-2xl font-semibold text-gray-900 text-center">Create Parent Account</h3>
                    <p class="text-sm text-gray-500 text-center mt-2">Start managing your family's allowances</p>
                </div>

                @if (!string.IsNullOrEmpty(SuccessMessage))
                {
                    <div class="bg-green-50 border-l-4 border-green-500 p-4 rounded">
                        <div class="flex">
                            <svg class="h-5 w-5 text-green-500 mr-2" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                            </svg>
                            <p class="text-sm text-green-700">@SuccessMessage</p>
                        </div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="bg-red-50 border-l-4 border-red-500 p-4 rounded">
                        <div class="flex">
                            <svg class="h-5 w-5 text-red-500 mr-2" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                            </svg>
                            <p class="text-sm text-red-700">@ErrorMessage</p>
                        </div>
                    </div>
                }

                <EditForm Model="@Model" OnValidSubmit="@HandleRegister">
                    <DataAnnotationsValidator />

                    <div class="space-y-4">
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label class="form-label">First Name</label>
                                <InputText @bind-Value="Model.FirstName"
                                          class="form-input"
                                          placeholder="John"
                                          id="firstName"
                                          name="firstName" />
                                <ValidationMessage For="@(() => Model.FirstName)" class="form-error" />
                            </div>

                            <div>
                                <label class="form-label">Last Name</label>
                                <InputText @bind-Value="Model.LastName"
                                          class="form-input"
                                          placeholder="Smith"
                                          id="lastName"
                                          name="lastName" />
                                <ValidationMessage For="@(() => Model.LastName)" class="form-error" />
                            </div>
                        </div>

                        <div>
                            <label class="form-label">Family Name</label>
                            <div class="relative">
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                                    </svg>
                                </div>
                                <InputText @bind-Value="Model.FamilyName"
                                          class="form-input pl-10"
                                          placeholder="Smith Family"
                                          id="familyName"
                                          name="familyName" />
                            </div>
                            <ValidationMessage For="@(() => Model.FamilyName)" class="form-error" />
                            <p class="form-helper">Choose a name for your family (e.g., "Smith Family")</p>
                        </div>

                        <div>
                            <label class="form-label">Email Address</label>
                            <div class="relative">
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207" />
                                    </svg>
                                </div>
                                <InputText @bind-Value="Model.Email"
                                          class="form-input pl-10"
                                          placeholder="you@example.com"
                                          id="email"
                                          name="email" />
                            </div>
                            <ValidationMessage For="@(() => Model.Email)" class="form-error" />
                        </div>

                        <div>
                            <label class="form-label">Password</label>
                            <div class="relative">
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                                    </svg>
                                </div>
                                <InputText type="password"
                                          @bind-Value="Model.Password"
                                          class="form-input pl-10"
                                          placeholder="••••••••"
                                          id="password"
                                          name="password" />
                            </div>
                            <ValidationMessage For="@(() => Model.Password)" class="form-error" />
                            <p class="form-helper">Minimum 6 characters, must include a number</p>
                        </div>

                        <div>
                            <button type="submit"
                                    class="btn-primary w-full text-lg py-4"
                                    disabled="@IsProcessing">
                                @if (IsProcessing)
                                {
                                    <span class="flex items-center justify-center">
                                        <span class="spinner mr-2"></span>
                                        <span>Creating account...</span>
                                    </span>
                                }
                                else
                                {
                                    <span class="flex items-center justify-center">
                                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
                                        </svg>
                                        <span>Create Account</span>
                                    </span>
                                }
                            </button>
                        </div>
                    </div>
                </EditForm>

                <div class="text-center pt-4 border-t border-gray-200">
                    <p class="text-sm text-gray-600">
                        Already have an account?
                        <a href="/login" class="font-medium text-green-600 hover:text-green-700 transition-colors">
                            Sign in
                        </a>
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel Model = new();
    private bool IsProcessing = false;
    private string? ErrorMessage;
    private string? SuccessMessage;

    private async Task HandleRegister()
    {
        IsProcessing = true;
        ErrorMessage = null;
        SuccessMessage = null;

        try
        {
            var dto = new RegisterParentDto(
                Model.Email,
                Model.Password,
                Model.FirstName,
                Model.LastName,
                Model.FamilyName);

            var result = await AccountService.RegisterParentAsync(dto);

            if (result.Succeeded)
            {
                // Registration succeeded - redirect to login page
                SuccessMessage = "Account created successfully! Redirecting to login...";
                await Task.Delay(1500); // Brief delay to show success message
                Navigation.NavigateTo("/login", forceLoad: true);
            }
            else
            {
                ErrorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            IsProcessing = false;
        }
    }

    private class RegisterModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "First name is required")]
        [StringLength(50)]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Last name is required")]
        [StringLength(50)]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Family name is required")]
        [StringLength(100, ErrorMessage = "Family name must be less than 100 characters")]
        public string FamilyName { get; set; } = string.Empty;
    }
}
