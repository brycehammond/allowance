@page "/register"
@using AllowanceTracker.DTOs
@using AllowanceTracker.Services
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@inject IAccountService AccountService
@inject NavigationManager Navigation

<PageTitle>Register - Allowance Tracker</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4">Create Parent Account</h3>

                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @ErrorMessage
                        </div>
                    }

                    <EditForm Model="@Model" OnValidSubmit="@HandleRegister">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <InputText @bind-Value="Model.Email" class="form-control" name="email" />
                            <ValidationMessage For="@(() => Model.Email)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <InputText type="password" @bind-Value="Model.Password" class="form-control" name="password" />
                            <ValidationMessage For="@(() => Model.Password)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">First Name</label>
                            <InputText @bind-Value="Model.FirstName" class="form-control" name="firstName" />
                            <ValidationMessage For="@(() => Model.FirstName)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Last Name</label>
                            <InputText @bind-Value="Model.LastName" class="form-control" name="lastName" />
                            <ValidationMessage For="@(() => Model.LastName)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Family Name</label>
                            <InputText @bind-Value="Model.FamilyName" class="form-control" name="familyName" />
                            <ValidationMessage For="@(() => Model.FamilyName)" />
                            <small class="form-text text-muted">Choose a name for your family (e.g., "Smith Family")</small>
                        </div>

                        <button type="submit" class="btn btn-primary w-100" disabled="@IsProcessing">
                            @if (IsProcessing)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                                <span>Creating Account...</span>
                            }
                            else
                            {
                                <span>Create Account</span>
                            }
                        </button>
                    </EditForm>

                    <div class="mt-3 text-center">
                        <p>Already have an account? <a href="/login">Log in</a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel Model = new();
    private bool IsProcessing = false;
    private string? ErrorMessage;

    private async Task HandleRegister()
    {
        IsProcessing = true;
        ErrorMessage = null;

        try
        {
            var dto = new RegisterParentDto(
                Model.Email,
                Model.Password,
                Model.FirstName,
                Model.LastName,
                Model.FamilyName);

            var result = await AccountService.RegisterParentAsync(dto);

            if (result.Succeeded)
            {
                // Auto-login after registration
                await AccountService.LoginAsync(Model.Email, Model.Password);
                Navigation.NavigateTo("/dashboard", forceLoad: true);
            }
            else
            {
                ErrorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "An error occurred during registration. Please try again.";
        }
        finally
        {
            IsProcessing = false;
        }
    }

    private class RegisterModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "First name is required")]
        [StringLength(50)]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Last name is required")]
        [StringLength(50)]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Family name is required")]
        [StringLength(100, ErrorMessage = "Family name must be less than 100 characters")]
        public string FamilyName { get; set; } = string.Empty;
    }
}
