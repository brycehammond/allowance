@page "/dashboard"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@using AllowanceTracker.Components
@using AllowanceTracker.DTOs
@using AllowanceTracker.Services
@using Microsoft.AspNetCore.SignalR.Client
@inject IFamilyService FamilyService
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Dashboard</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Family Dashboard</h1>
        <a href="/children/create" class="btn btn-primary">
            <span class="oi oi-plus"></span> Add Child
        </a>
    </div>
</div>

@if (Loading)
{
    <p><em>Loading...</em></p>
}
else if (Children.Any())
{
    <div class="row">
        @foreach (var child in Children)
        {
            <div class="col-md-4 mb-3">
                <ChildCard Child="@child" OnTransactionAdded="@RefreshData" />
            </div>
        }
    </div>
}
else
{
    <p>No children found. Add a child to get started.</p>
}

@code {
    private bool Loading = true;
    private List<ChildDto> Children = new();
    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();

        // Setup SignalR connection for real-time updates
        try
        {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/familyhub"))
                .WithAutomaticReconnect()
                .Build();

            _hubConnection.On<Guid>("TransactionCreated", async (childId) =>
            {
                // Refresh data when transaction created
                await RefreshData();
                await InvokeAsync(StateHasChanged);
            });

            await _hubConnection.StartAsync();
        }
        catch
        {
            // SignalR connection failed (e.g., in tests or when server unavailable)
            // Component still functions without real-time updates
        }
    }

    private async Task RefreshData()
    {
        Loading = true;
        Children = await FamilyService.GetChildrenAsync();
        Loading = false;
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
