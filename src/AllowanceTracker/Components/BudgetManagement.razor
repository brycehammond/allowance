@using AllowanceTracker.DTOs
@using AllowanceTracker.Models
@using AllowanceTracker.Services
@inject ICategoryBudgetService BudgetService
@inject ICategoryService CategoryService

<div class="space-y-6">
    <!-- Header -->
    <div class="flex items-center justify-between">
        <h2 class="text-2xl font-bold text-gray-900">Budget Management</h2>
        <button type="button" class="btn-primary" @onclick="ShowAddBudgetForm">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
            </svg>
            Add Budget
        </button>
    </div>

    @if (IsLoading)
    {
        <div class="flex justify-center py-12">
            <div class="spinner h-8 w-8"></div>
        </div>
    }
    else if (!Budgets.Any())
    {
        <div class="text-center py-12">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
            </svg>
            <h3 class="mt-2 text-sm font-medium text-gray-900">No budgets set</h3>
            <p class="mt-1 text-sm text-gray-500">Get started by creating a budget for a spending category.</p>
        </div>
    }
    else
    {
        <!-- Budget List -->
        <div class="grid gap-4">
            @foreach (var budget in Budgets)
            {
                var status = BudgetStatuses.FirstOrDefault(s => s.Category == budget.Category && s.Period == budget.Period);
                <div class="card">
                    <div class="flex items-center justify-between">
                        <div class="flex-1">
                            <div class="flex items-center gap-3">
                                <h3 class="text-lg font-semibold text-gray-900">
                                    @CategoryService.GetCategoryDisplayName(budget.Category)
                                </h3>
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @(budget.EnforceLimit ? "bg-red-100 text-red-800" : "bg-yellow-100 text-yellow-800")">
                                    @(budget.EnforceLimit ? "Enforced" : "Warning Only")
                                </span>
                            </div>
                            <div class="mt-2 grid grid-cols-2 gap-4 text-sm">
                                <div>
                                    <span class="text-gray-500">Budget Limit:</span>
                                    <span class="ml-2 font-mono font-semibold text-gray-900">$@budget.Limit.ToString("F2")</span>
                                </div>
                                <div>
                                    <span class="text-gray-500">Period:</span>
                                    <span class="ml-2 font-medium text-gray-700">@budget.Period</span>
                                </div>
                                @if (status != null)
                                {
                                    <div>
                                        <span class="text-gray-500">Spent:</span>
                                        <span class="ml-2 font-mono font-semibold text-gray-900">$@status.CurrentSpending.ToString("F2")</span>
                                    </div>
                                    <div>
                                        <span class="text-gray-500">Remaining:</span>
                                        <span class="ml-2 font-mono font-semibold @GetRemainingColorClass(status)">$@status.Remaining.ToString("F2")</span>
                                    </div>
                                }
                            </div>
                            @if (status != null)
                            {
                                <div class="mt-3">
                                    <div class="flex items-center justify-between text-xs text-gray-600 mb-1">
                                        <span>@status.PercentUsed% used</span>
                                        <span>@status.Status</span>
                                    </div>
                                    <div class="w-full bg-gray-200 rounded-full h-2">
                                        <div class="@GetProgressBarColorClass(status) h-2 rounded-full" style="width: @Math.Min(status.PercentUsed, 100)%"></div>
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="ml-4 flex gap-2">
                            <button type="button" class="btn-ghost text-sm" @onclick="() => EditBudget(budget)">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                </svg>
                                Edit
                            </button>
                            <button type="button" class="btn-ghost text-sm text-error hover:bg-error-light" @onclick="() => DeleteBudget(budget)">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                </svg>
                                Delete
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public Guid ChildId { get; set; }

    private List<CategoryBudget> Budgets = new();
    private List<CategoryBudgetStatusDto> BudgetStatuses = new();
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadBudgetsAsync();
    }

    private async Task LoadBudgetsAsync()
    {
        IsLoading = true;
        try
        {
            Budgets = await BudgetService.GetAllBudgetsAsync(ChildId);

            // Load status for each budget period
            var weeklyStatuses = await CategoryService.GetBudgetStatusAsync(ChildId, BudgetPeriod.Weekly);
            var monthlyStatuses = await CategoryService.GetBudgetStatusAsync(ChildId, BudgetPeriod.Monthly);

            BudgetStatuses = weeklyStatuses.Concat(monthlyStatuses).ToList();
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void ShowAddBudgetForm()
    {
        // TODO: Implement add budget form
    }

    private void EditBudget(CategoryBudget budget)
    {
        // TODO: Implement edit budget
    }

    private async Task DeleteBudget(CategoryBudget budget)
    {
        // TODO: Implement delete budget with confirmation
    }

    private string GetRemainingColorClass(CategoryBudgetStatusDto status)
    {
        return status.Status switch
        {
            BudgetStatus.OverBudget => "text-error",
            BudgetStatus.AtLimit => "text-error",
            BudgetStatus.Warning => "text-amber-600",
            _ => "text-primary"
        };
    }

    private string GetProgressBarColorClass(CategoryBudgetStatusDto status)
    {
        return status.Status switch
        {
            BudgetStatus.OverBudget => "bg-error",
            BudgetStatus.AtLimit => "bg-error",
            BudgetStatus.Warning => "bg-amber-500",
            _ => "bg-primary"
        };
    }
}
