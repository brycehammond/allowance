@using AllowanceTracker.DTOs
@using AllowanceTracker.Services
@inject ITransactionAnalyticsService AnalyticsService

<div class="bg-white rounded-xl shadow-sm p-6">
    <div class="flex justify-between items-center mb-6">
        <h4 class="text-lg font-semibold text-gray-900">Income vs Spending</h4>
        <div class="flex items-center gap-2">
            @if (ShowControls)
            {
                <div class="inline-flex rounded-md shadow-sm" role="group">
                    <button type="button"
                            class="@GetButtonClass(3)"
                            @onclick="() => LoadData(3)">
                        3M
                    </button>
                    <button type="button"
                            class="@GetButtonClass(6)"
                            @onclick="() => LoadData(6)">
                        6M
                    </button>
                    <button type="button"
                            class="@GetButtonClass(12)"
                            @onclick="() => LoadData(12)">
                        12M
                    </button>
                </div>
            }
            @if (ShowExportButton && Data.Any())
            {
                <button class="btn-ghost" @onclick="ExportToCSV">
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                    </svg>
                    Export
                </button>
            }
        </div>
    </div>

    @if (IsLoading)
    {
        <div class="flex items-center justify-center py-12">
            <div class="spinner h-8 w-8"></div>
        </div>
    }
    else if (Data.Any())
    {
        <div class="chart-data">
            <!-- Monthly comparison grid -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <!-- Income Column -->
                <div class="space-y-2">
                    <h6 class="text-sm font-semibold text-gray-700 mb-3 flex items-center">
                        <span class="w-3 h-3 bg-green-500 rounded-full mr-2"></span>
                        Income
                    </h6>
                    @foreach (var month in Data)
                    {
                        <div class="flex justify-between items-center py-1.5 px-2 rounded hover:bg-green-50 transition-colors">
                            <span class="text-sm text-gray-600">@month.MonthName</span>
                            <span class="text-sm font-mono font-medium text-green-600">@month.Income.ToString("C")</span>
                        </div>
                    }
                </div>

                <!-- Spending Column -->
                <div class="space-y-2">
                    <h6 class="text-sm font-semibold text-gray-700 mb-3 flex items-center">
                        <span class="w-3 h-3 bg-red-500 rounded-full mr-2"></span>
                        Spending
                    </h6>
                    @foreach (var month in Data)
                    {
                        <div class="flex justify-between items-center py-1.5 px-2 rounded hover:bg-red-50 transition-colors">
                            <span class="text-sm text-gray-600">@month.MonthName</span>
                            <span class="text-sm font-mono font-medium text-red-600">@month.Spending.ToString("C")</span>
                        </div>
                    }
                </div>

                <!-- Net Savings Column -->
                <div class="space-y-2">
                    <h6 class="text-sm font-semibold text-gray-700 mb-3 flex items-center">
                        <span class="w-3 h-3 bg-blue-500 rounded-full mr-2"></span>
                        Net Savings
                    </h6>
                    @foreach (var month in Data)
                    {
                        <div class="flex justify-between items-center py-1.5 px-2 rounded hover:bg-blue-50 transition-colors">
                            <span class="text-sm text-gray-600">@month.MonthName</span>
                            <span class="text-sm font-mono font-medium @(month.NetSavings >= 0 ? "text-blue-600" : "text-red-600")">@month.NetSavings.ToString("C")</span>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="text-center py-12">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <p class="mt-2 text-gray-600">No data available</p>
        </div>
    }
</div>

@code {
    [Parameter] public Guid ChildId { get; set; }
    [Parameter] public int DefaultMonths { get; set; } = 6;
    [Parameter] public bool ShowControls { get; set; } = true;
    [Parameter] public bool ShowExportButton { get; set; } = false;

    private List<MonthlyComparison> Data { get; set; } = new();
    private bool IsLoading { get; set; } = true;
    private int currentMonths;

    protected override async Task OnInitializedAsync()
    {
        currentMonths = DefaultMonths;
        await LoadData(currentMonths);
    }

    private async Task LoadData(int months)
    {
        IsLoading = true;
        currentMonths = months;
        StateHasChanged();

        try
        {
            Data = await AnalyticsService.GetMonthlyComparisonAsync(ChildId, months);
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private string GetButtonClass(int months)
    {
        var baseClasses = "px-4 py-2 text-sm font-medium border transition-colors";
        var isFirst = months == 3;
        var isLast = months == 12;
        var roundingClasses = isFirst ? "rounded-l-md" : isLast ? "rounded-r-md" : "";
        var activeClasses = currentMonths == months
            ? "bg-green-600 text-white border-green-600 z-10"
            : "bg-white text-gray-700 border-gray-300 hover:bg-gray-50";

        return $"{baseClasses} {roundingClasses} {activeClasses}";
    }

    private void ExportToCSV()
    {
        // CSV export implementation will be added with CsvHelper
        // For now, just log
        Console.WriteLine("Export to CSV clicked");
    }

    public async Task RefreshDataAsync()
    {
        await LoadData(currentMonths);
    }
}
