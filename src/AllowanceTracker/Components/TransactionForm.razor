@using AllowanceTracker.DTOs
@using AllowanceTracker.Models
@using AllowanceTracker.Services
@using System.ComponentModel.DataAnnotations
@inject ITransactionService TransactionService
@inject ICategoryService CategoryService

<EditForm Model="@Model" OnValidSubmit="@HandleSubmit" class="space-y-4">
    <DataAnnotationsValidator />

    <!-- Validation Summary -->
    <ValidationSummary class="rounded-md bg-error-light border border-error p-3 text-sm text-error" />

    <!-- Amount Field -->
    <div>
        <label class="form-label">Amount</label>
        <div class="relative">
            <div class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                <span class="text-gray-500 text-sm">$</span>
            </div>
            <InputNumber class="form-input pl-7 font-mono" @bind-Value="Model.Amount" name="amount" placeholder="0.00" />
        </div>
        <ValidationMessage For="@(() => Model.Amount)" class="form-error" />
    </div>

    <!-- Type Field -->
    <div>
        <label class="form-label">Transaction Type</label>
        <InputSelect class="form-input" @bind-Value="Model.Type" name="type" @bind-Value:after="OnTypeChanged">
            <option value="@TransactionType.Credit">
                ðŸ’° Add Money (Income/Credit)
            </option>
            <option value="@TransactionType.Debit">
                ðŸ’¸ Spend Money (Expense/Debit)
            </option>
        </InputSelect>
        <p class="form-helper">Select whether this transaction adds or removes money</p>
    </div>

    <!-- Category Field -->
    <div>
        <label class="form-label">Category</label>
        <InputSelect class="form-input" @bind-Value="Model.Category" name="category">
            @foreach (var category in GetAvailableCategories())
            {
                <option value="@category">@GetCategoryDisplayName(category)</option>
            }
        </InputSelect>
        <p class="form-helper">Choose the category that best describes this transaction</p>
    </div>

    <!-- Description Field -->
    <div>
        <label class="form-label">Description</label>
        <InputText class="form-input" @bind-Value="Model.Description" name="description" placeholder="e.g., Weekly allowance, Toy purchase" />
        <ValidationMessage For="@(() => Model.Description)" class="form-error" />
        <p class="form-helper">Describe what this transaction is for</p>
    </div>

    <!-- Action Buttons -->
    <div class="flex gap-2 pt-2">
        <button type="submit" class="btn-primary flex-1 justify-center" disabled="@IsSaving">
            @if (IsSaving)
            {
                <div class="inline-flex items-center gap-2">
                    <div class="spinner h-4 w-4"></div>
                    <span>Saving...</span>
                </div>
            }
            else
            {
                <div class="inline-flex items-center gap-2">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                    <span>Save Transaction</span>
                </div>
            }
        </button>
        <button type="button" class="btn-ghost" @onclick="Cancel">
            Cancel
        </button>
    </div>
</EditForm>

@code {
    [Parameter, EditorRequired]
    public Guid ChildId { get; set; }

    [Parameter]
    public EventCallback OnSaved { get; set; }

    [Parameter]
    public EventCallback OnCancelled { get; set; }

    private TransactionFormModel Model = new();
    private bool IsSaving = false;

    private async Task HandleSubmit()
    {
        IsSaving = true;
        try
        {
            var dto = new CreateTransactionDto(
                ChildId,
                Model.Amount,
                Model.Type,
                Model.Category,
                Model.Description);

            await TransactionService.CreateTransactionAsync(dto);
            await OnSaved.InvokeAsync();
        }
        finally
        {
            IsSaving = false;
        }
    }

    private async Task Cancel()
    {
        await OnCancelled.InvokeAsync();
    }

    private void OnTypeChanged()
    {
        // Update category to appropriate default when type changes
        var categories = CategoryService.GetCategoriesForType(Model.Type);
        if (categories.Any())
        {
            Model.Category = categories.First();
        }
    }

    private List<TransactionCategory> GetAvailableCategories()
    {
        return CategoryService.GetCategoriesForType(Model.Type);
    }

    private string GetCategoryDisplayName(TransactionCategory category)
    {
        // Convert enum name to friendly display name (e.g., OtherIncome -> Other Income)
        return System.Text.RegularExpressions.Regex.Replace(category.ToString(), "([a-z])([A-Z])", "$1 $2");
    }

    public class TransactionFormModel
    {
        [Required]
        [Range(0.01, 10000, ErrorMessage = "Amount must be between $0.01 and $10,000")]
        public decimal Amount { get; set; }

        public TransactionType Type { get; set; } = TransactionType.Credit;

        [Required]
        public TransactionCategory Category { get; set; } = TransactionCategory.Allowance;

        [Required]
        [StringLength(500, MinimumLength = 3, ErrorMessage = "Description must be between 3 and 500 characters")]
        public string Description { get; set; } = string.Empty;
    }
}
