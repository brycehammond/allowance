@using AllowanceTracker.DTOs
@using AllowanceTracker.Models
@using AllowanceTracker.Services
@inject ITransactionAnalyticsService AnalyticsService

<div class="bg-white rounded-xl shadow-sm p-6">
    <!-- Overall Balance Display -->
    <div class="text-center mb-6 pb-6 border-b">
        <div class="inline-flex items-center justify-center w-32 h-32 rounded-full bg-gradient-to-br from-green-400 to-green-600 mb-4">
            <div class="text-center">
                <svg class="w-12 h-12 text-white mx-auto mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
            </div>
        </div>
        <h3 class="text-3xl font-mono font-bold text-gray-900">@CurrentBalance.ToString("C")</h3>
        <small class="text-gray-600">Current Balance</small>
    </div>

    <!-- Wish List Progress Bars -->
    <div class="space-y-4">
        @if (WishListItems.Any())
        {
            <h5 class="text-sm font-semibold text-gray-700 mb-3">Savings Goals</h5>
            @foreach (var item in WishListItems)
            {
                <div class="space-y-2">
                    <div class="flex justify-between items-center">
                        <span class="text-sm font-medium text-gray-900">@item.Name</span>
                        <span class="text-sm font-mono font-medium text-gray-700">@item.Price.ToString("C")</span>
                    </div>
                    <div class="w-full bg-gray-200 rounded-full h-6 overflow-hidden">
                        <div class="@GetProgressClass(item) h-6 rounded-full flex items-center justify-center text-xs font-medium text-white transition-all duration-300"
                             style="width: @GetProgressPercent(item)%"
                             role="progressbar"
                             aria-valuenow="@GetProgressPercent(item)"
                             aria-valuemin="0"
                             aria-valuemax="100">
                            @if (GetProgressPercent(item) > 15)
                            {
                                <span>@GetProgressPercent(item)%</span>
                            }
                        </div>
                    </div>
                    <small class="text-gray-600 text-xs">
                        @GetTimeToGoal(item)
                    </small>
                </div>
            }
        }
        else
        {
            <div class="text-center py-8">
                <svg class="mx-auto h-12 w-12 text-gray-400 mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                </svg>
                <p class="text-gray-600 mb-3">No savings goals yet!</p>
                <a href="/wishlist/add" class="btn-primary inline-flex items-center">
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                    </svg>
                    Add Wish List Item
                </a>
            </div>
        }
    </div>

    <!-- Recent Trend Sparkline -->
    @if (ShowSparkline && balanceTrend.Any())
    {
        <div class="mt-6 pt-6 border-t">
            <div class="flex justify-between items-center mb-2">
                <small class="text-gray-600 font-medium">Last 7 Days Trend</small>
                <small class="text-gray-500">@balanceTrend.Count points</small>
            </div>
            <div class="flex items-end h-12 gap-1">
                @{
                    var maxValue = balanceTrend.Max(b => b.Balance);
                    var minValue = balanceTrend.Min(b => b.Balance);
                    var range = maxValue - minValue;
                }
                @foreach (var point in balanceTrend)
                {
                    var heightPercent = range > 0 ? ((point.Balance - minValue) / range) * 100 : 50;
                    <div class="flex-1 bg-green-500 rounded-t transition-all hover:bg-green-600"
                         style="height: @(heightPercent)%"
                         title="@point.Date.ToString("MMM dd"): @point.Balance.ToString("C")">
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public Guid ChildId { get; set; }
    [Parameter] public decimal CurrentBalance { get; set; }
    [Parameter] public decimal WeeklyAllowance { get; set; }
    [Parameter] public List<WishListItem> WishListItems { get; set; } = new();
    [Parameter] public bool ShowSparkline { get; set; } = true;

    private List<BalancePoint> balanceTrend = new();

    protected override async Task OnInitializedAsync()
    {
        if (ShowSparkline)
        {
            balanceTrend = await AnalyticsService.GetBalanceHistoryAsync(ChildId, 7);
        }
    }

    private decimal GetProgressPercent(WishListItem item)
    {
        if (item.Price == 0) return 0;
        var percent = (CurrentBalance / item.Price) * 100;
        return Math.Min(Math.Round(percent, 0), 100); // Cap at 100%
    }

    private string GetProgressClass(WishListItem item)
    {
        var percent = GetProgressPercent(item);
        if (percent >= 100) return "bg-green-500";
        if (percent >= 75) return "bg-blue-500";
        if (percent >= 50) return "bg-amber-500";
        return "bg-red-500";
    }

    private string GetTimeToGoal(WishListItem item)
    {
        var remaining = item.Price - CurrentBalance;
        if (remaining <= 0) return "Goal reached! ðŸŽ‰";

        if (WeeklyAllowance == 0) return "Set weekly allowance to estimate";

        var weeksNeeded = Math.Ceiling(remaining / WeeklyAllowance);
        return $"~{weeksNeeded} weeks at current allowance";
    }
}
