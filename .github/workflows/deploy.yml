name: Build and Deploy

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - 'docs/**'
      - 'README.md'
      - 'specs/**'
  pull_request:
    branches: [main, develop]
  workflow_dispatch: # Allow manual triggers

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'
  BUILD_CONFIGURATION: 'Release'

jobs:
  # ===========================
  # Job 1: Build and Test .NET API
  # ===========================
  build-api:
    name: Build .NET API
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore NuGet packages
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

      - name: Run tests
        run: dotnet test --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --logger trx --collect:"XPlat Code Coverage"

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: .NET Test Results
          path: '**/*.trx'
          reporter: dotnet-trx

      - name: Publish API
        run: |
          dotnet publish src/AllowanceTracker/AllowanceTracker.csproj \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --output ./api-publish \
            --no-build

      - name: Upload API artifact
        uses: actions/upload-artifact@v4
        with:
          name: api
          path: ./api-publish

  # ===========================
  # Job 2: Build Azure Function
  # ===========================
  build-function:
    name: Build Azure Function
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore NuGet packages
        run: dotnet restore src/AllowanceTracker.Functions/AllowanceTracker.Functions.csproj

      - name: Build Function
        run: |
          dotnet build src/AllowanceTracker.Functions/AllowanceTracker.Functions.csproj \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --no-restore

      - name: Publish Function
        run: |
          dotnet publish src/AllowanceTracker.Functions/AllowanceTracker.Functions.csproj \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --output ./function-publish \
            --no-build

      - name: Upload Function artifact
        uses: actions/upload-artifact@v4
        with:
          name: function
          path: ./function-publish

  # ===========================
  # Job 3: Build React App
  # ===========================
  build-react:
    name: Build React App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        working-directory: ./web
        run: npm ci

      - name: Build React app
        working-directory: ./web
        run: npm run build
        env:
          VITE_API_URL: ${{ secrets.REACT_APP_API_URL }}

      - name: Upload React artifact
        uses: actions/upload-artifact@v4
        with:
          name: react
          path: ./web/dist

  # ===========================
  # Job 4: Code Quality Checks
  # ===========================
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Restore .NET packages
        run: dotnet restore

      - name: Check .NET code formatting
        run: dotnet format --verify-no-changes --no-restore
        continue-on-error: true

      - name: Build with warnings as errors
        run: dotnet build --no-restore -warnaserror
        continue-on-error: true

      - name: Install React dependencies
        working-directory: ./web
        run: npm ci

      - name: Run ESLint
        working-directory: ./web
        run: npm run lint
        continue-on-error: true

      - name: TypeScript type check
        working-directory: ./web
        run: npm run type-check
        continue-on-error: true

  # ===========================
  # Job 5: Deploy API to App Service
  # ===========================
  deploy-api:
    name: Deploy API to Azure
    runs-on: ubuntu-latest
    needs: [build-api]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://${{ secrets.API_APP_SERVICE_NAME }}.azurewebsites.net

    steps:
      - name: Download API artifact
        uses: actions/download-artifact@v4
        with:
          name: api
          path: ./api

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ secrets.API_APP_SERVICE_NAME }}
          package: ./api

      - name: Configure App Settings
        uses: azure/appservice-settings@v1
        with:
          app-name: ${{ secrets.API_APP_SERVICE_NAME }}
          app-settings-json: |
            [
              {
                "name": "ASPNETCORE_ENVIRONMENT",
                "value": "Production"
              },
              {
                "name": "ConnectionStrings__DefaultConnection",
                "value": "${{ secrets.AZURE_SQL_CONNECTION_STRING }}"
              },
              {
                "name": "Jwt__SecretKey",
                "value": "${{ secrets.JWT_SECRET_KEY }}"
              },
              {
                "name": "Jwt__Issuer",
                "value": "AllowanceTracker"
              },
              {
                "name": "Jwt__Audience",
                "value": "AllowanceTracker"
              },
              {
                "name": "Jwt__ExpiryInDays",
                "value": "7"
              }
            ]

      - name: Run EF Core Migrations
        run: |
          dotnet tool install --global dotnet-ef --version 8.0.11
          cd api
          dotnet ef database update --connection "${{ secrets.AZURE_SQL_CONNECTION_STRING }}"

  # ===========================
  # Job 6: Deploy Azure Function
  # ===========================
  deploy-function:
    name: Deploy Function to Azure
    runs-on: ubuntu-latest
    needs: [build-function]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://${{ secrets.FUNCTION_APP_NAME }}.azurewebsites.net

    steps:
      - name: Download Function artifact
        uses: actions/download-artifact@v4
        with:
          name: function
          path: ./function

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Function App
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ secrets.FUNCTION_APP_NAME }}
          package: ./function

      - name: Configure Function App Settings
        uses: azure/cli@v2
        with:
          inlineScript: |
            az functionapp config appsettings set \
              --name ${{ secrets.FUNCTION_APP_NAME }} \
              --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
              --settings \
                "ConnectionStrings__DefaultConnection=${{ secrets.AZURE_SQL_CONNECTION_STRING }}" \
                "APPLICATIONINSIGHTS_CONNECTION_STRING=${{ secrets.APPLICATION_INSIGHTS_CONNECTION_STRING }}" \
                "FUNCTIONS_WORKER_RUNTIME=dotnet-isolated"

  # ===========================
  # Job 7: Deploy React to Storage
  # ===========================
  deploy-react:
    name: Deploy React to Azure Storage
    runs-on: ubuntu-latest
    needs: [build-react]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://${{ secrets.STORAGE_ACCOUNT_NAME }}.z13.web.core.windows.net

    steps:
      - name: Download React artifact
        uses: actions/download-artifact@v4
        with:
          name: react
          path: ./react-dist

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Enable Static Website
        uses: azure/cli@v2
        with:
          inlineScript: |
            az storage blob service-properties update \
              --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }} \
              --static-website \
              --index-document index.html \
              --404-document index.html

      - name: Upload to Azure Storage
        uses: azure/cli@v2
        with:
          inlineScript: |
            # Upload assets with long cache
            az storage blob upload-batch \
              --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }} \
              --auth-mode key \
              --destination '$web' \
              --source ./react-dist \
              --overwrite \
              --content-cache-control "public, max-age=31536000, immutable" \
              --pattern "assets/*"

            # Upload index.html and other files without cache
            az storage blob upload-batch \
              --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }} \
              --auth-mode key \
              --destination '$web' \
              --source ./react-dist \
              --overwrite \
              --content-cache-control "no-cache" \
              --exclude-pattern "assets/*"

      - name: Purge CDN (if configured)
        uses: azure/cli@v2
        continue-on-error: true
        with:
          inlineScript: |
            if [ ! -z "${{ secrets.CDN_PROFILE_NAME }}" ] && [ ! -z "${{ secrets.CDN_ENDPOINT_NAME }}" ]; then
              echo "Purging CDN endpoint..."
              az cdn endpoint purge \
                --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
                --profile-name ${{ secrets.CDN_PROFILE_NAME }} \
                --name ${{ secrets.CDN_ENDPOINT_NAME }} \
                --content-paths '/*'
            else
              echo "CDN not configured, skipping purge"
            fi
