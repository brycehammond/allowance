name: CI Pipeline

# This workflow provides comprehensive CI/CD for the Allowance Tracker application
# Runs builds and tests in parallel for speed
# Publishes artifacts for successful builds

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - 'docs/**'
      - 'README.md'
      - 'specs/**'
      - '*.md'
  pull_request:
    branches: [main, develop]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'

jobs:
  # ===========================
  # .NET API Build & Test
  # ===========================
  api-build:
    name: Build & Test API
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: dotnet test --configuration Release --no-build --verbosity normal --logger "trx;LogFileName=test-results.trx" --collect:"XPlat Code Coverage"

      - name: Publish API
        run: dotnet publish src/AllowanceTracker/AllowanceTracker.csproj --configuration Release --output ./publish/api --no-build

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-test-results-${{ github.sha }}
          path: '**/test-results.trx'
          retention-days: 7

      - name: Upload code coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-code-coverage-${{ github.sha }}
          path: '**/coverage.cobertura.xml'
          retention-days: 7

      - name: Upload API artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-${{ github.sha }}
          path: ./publish/api
          retention-days: 30

  # ===========================
  # Azure Function Build
  # ===========================
  function-build:
    name: Build Azure Function
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build Function
        run: dotnet build src/AllowanceTracker.Functions/AllowanceTracker.Functions.csproj --configuration Release --no-restore

      - name: Publish Function
        run: dotnet publish src/AllowanceTracker.Functions/AllowanceTracker.Functions.csproj --configuration Release --output ./publish/function --no-build

      - name: Upload Function artifacts
        uses: actions/upload-artifact@v4
        with:
          name: function-${{ github.sha }}
          path: ./publish/function
          retention-days: 30

  # ===========================
  # React Frontend Build
  # ===========================
  react-build:
    name: Build React App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        working-directory: ./web
        run: npm ci

      - name: Build React app
        working-directory: ./web
        run: npm run build
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL || 'https://api.example.com' }}

      - name: Upload React artifacts
        uses: actions/upload-artifact@v4
        with:
          name: react-${{ github.sha }}
          path: web/dist
          retention-days: 30

  # ===========================
  # .NET Code Quality
  # ===========================
  dotnet-quality:
    name: .NET Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Check code formatting
        run: dotnet format --verify-no-changes --no-restore
        continue-on-error: true

      - name: Build with warnings as errors
        run: dotnet build --no-restore -warnaserror
        continue-on-error: true

      - name: Check for vulnerable packages
        run: dotnet list package --vulnerable --include-transitive
        continue-on-error: true

  # ===========================
  # React Code Quality
  # ===========================
  react-quality:
    name: React Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        working-directory: ./web
        run: npm ci

      - name: Run ESLint
        working-directory: ./web
        run: npm run lint
        continue-on-error: true

      - name: TypeScript type check
        working-directory: ./web
        run: npm run type-check
        continue-on-error: true

      - name: Run npm audit
        working-directory: ./web
        run: npm audit --audit-level=moderate
        continue-on-error: true

  # ===========================
  # Summary Status Check
  # ===========================
  ci-success:
    name: CI Pipeline Success
    runs-on: ubuntu-latest
    needs: [api-build, function-build, react-build, dotnet-quality, react-quality]
    if: always()

    steps:
      - name: Check build status
        run: |
          if [ "${{ needs.api-build.result }}" != "success" ] || \
             [ "${{ needs.function-build.result }}" != "success" ] || \
             [ "${{ needs.react-build.result }}" != "success" ]; then
            echo "One or more builds failed"
            exit 1
          fi
          echo "All builds succeeded!"

      - name: Pipeline summary
        run: |
          echo "## CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| API Build | ${{ needs.api-build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Function Build | ${{ needs.function-build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| React Build | ${{ needs.react-build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| .NET Quality | ${{ needs.dotnet-quality.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| React Quality | ${{ needs.react-quality.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Artifacts published:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`api-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`function-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`react-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
