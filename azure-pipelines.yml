trigger:
  branches:
    include:
    - main
    - develop
  paths:
    exclude:
    - docs/*
    - README.md
    - specs/*

pr:
  branches:
    include:
    - main
    - develop

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  dotnetSdkVersion: '8.0.x'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: Build
    displayName: 'Build and Test'
    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET SDK'
      inputs:
        version: $(dotnetSdkVersion)
        includePreviewVersions: false

    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build solution'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'Run tests'
      inputs:
        command: 'test'
        projects: '**/*Tests.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --logger trx --collect:"XPlat Code Coverage"'
        publishTestResults: true

    - task: PublishCodeCoverageResults@2
      displayName: 'Publish code coverage'
      inputs:
        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
        codecoverageTool: 'Cobertura'

    - task: DotNetCoreCLI@2
      displayName: 'Publish application'
      inputs:
        command: 'publish'
        projects: 'src/AllowanceTracker/AllowanceTracker.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/publish --no-build'
        zipAfterPublish: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish build artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Docker
  displayName: 'Build Docker Image'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - job: BuildDocker
    displayName: 'Build and Push Docker Image'
    steps:
    - task: Docker@2
      displayName: 'Build Docker image'
      inputs:
        command: 'build'
        repository: 'allowancetracker'
        dockerfile: 'Dockerfile'
        tags: |
          $(Build.BuildId)
          latest

- stage: DeployAzure
  displayName: 'Deploy to Azure'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployWebApp
    displayName: 'Deploy to Azure App Service'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy to Azure Web App'
            inputs:
              azureSubscription: '$(AzureSubscription)'
              appType: 'webAppLinux'
              appName: '$(WebAppName)'
              package: '$(Pipeline.Workspace)/drop/publish/*.zip'
              runtimeStack: 'DOTNETCORE|8.0'

          - task: AzureCLI@2
            displayName: 'Run EF Core Migrations'
            inputs:
              azureSubscription: '$(AzureSubscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Install dotnet-ef tool
                dotnet tool install --global dotnet-ef --version 8.0.11

                # Extract the published app
                cd $(Pipeline.Workspace)/drop/publish
                unzip -o *.zip -d app
                cd app

                # Run migrations
                dotnet ef database update --connection "$(AzureSqlConnectionString)"

- stage: CodeQuality
  displayName: 'Code Quality'
  dependsOn: []
  jobs:
  - job: CodeAnalysis
    displayName: 'Code Analysis'
    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET SDK'
      inputs:
        version: $(dotnetSdkVersion)

    - task: DotNetCoreCLI@2
      displayName: 'Restore packages'
      inputs:
        command: 'restore'

    - script: |
        dotnet format --verify-no-changes --no-restore
      displayName: 'Check code formatting'
      continueOnError: true

    - task: DotNetCoreCLI@2
      displayName: 'Build with warnings as errors'
      inputs:
        command: 'build'
        arguments: '--no-restore -warnaserror'
      continueOnError: true
