# ===========================
# Azure DevOps CI Pipeline
# ===========================
#
# This pipeline handles continuous integration and validation:
#   - .NET 8.0 Web API build and test
#   - Azure Functions build (background jobs)
#   - React Frontend build
#   - Code quality analysis
#   - Test coverage reporting
#
# Build Strategy:
#   - Builds: Run in parallel for speed
#   - Tests: Run on all branches
#   - Artifacts: Published for all successful builds
#   - Code Quality: Runs in parallel with builds
#
# Deployment: Handled separately (Railway, manual, etc.)
#
# Documentation: See docs/azure-devops-setup.md
# ===========================

trigger:
  branches:
    include:
    - main
    - develop
  paths:
    exclude:
    - docs/*
    - README.md
    - specs/*

pr:
  branches:
    include:
    - main
    - develop

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  dotnetSdkVersion: '8.0.x'
  nodeVersion: '20.x'

stages:
# ===========================
# Stage 1: Build .NET API
# ===========================
- stage: BuildAPI
  displayName: 'Build .NET API'
  jobs:
  - job: BuildAPI
    displayName: 'Build and Test API'
    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET SDK'
      inputs:
        version: $(dotnetSdkVersion)
        includePreviewVersions: false

    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build solution'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'Run tests'
      inputs:
        command: 'test'
        projects: '**/*Tests.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --logger trx --collect:"XPlat Code Coverage"'
        publishTestResults: true

    - task: PublishCodeCoverageResults@2
      displayName: 'Publish code coverage'
      inputs:
        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
        codecoverageTool: 'Cobertura'
      condition: succeededOrFailed()

    - task: DotNetCoreCLI@2
      displayName: 'Publish API'
      inputs:
        command: 'publish'
        projects: 'src/AllowanceTracker/AllowanceTracker.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/api --no-build'
        zipAfterPublish: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish API artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/api'
        ArtifactName: 'api'
        publishLocation: 'Container'

# ===========================
# Stage 2: Build Azure Function
# ===========================
- stage: BuildFunction
  displayName: 'Build Azure Function'
  dependsOn: []
  jobs:
  - job: BuildFunction
    displayName: 'Build Weekly Allowance Function'
    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET SDK'
      inputs:
        version: $(dotnetSdkVersion)
        includePreviewVersions: false

    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        projects: 'src/AllowanceTracker.Functions/AllowanceTracker.Functions.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build Function'
      inputs:
        command: 'build'
        projects: 'src/AllowanceTracker.Functions/AllowanceTracker.Functions.csproj'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'Publish Function'
      inputs:
        command: 'publish'
        projects: 'src/AllowanceTracker.Functions/AllowanceTracker.Functions.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/function --no-build'
        zipAfterPublish: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Function artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/function'
        ArtifactName: 'function'
        publishLocation: 'Container'

# ===========================
# Stage 3: Build React App
# ===========================
- stage: BuildReact
  displayName: 'Build React App'
  dependsOn: []
  jobs:
  - job: BuildReact
    displayName: 'Build React Frontend'
    steps:
    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSpec: $(nodeVersion)

    - script: |
        cd web
        npm ci
      displayName: 'Install dependencies'

    - script: |
        cd web
        npm run build
      displayName: 'Build React app'
      env:
        VITE_API_URL: '$(ReactAppApiUrl)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish React artifacts'
      inputs:
        PathtoPublish: 'web/dist'
        ArtifactName: 'react'
        publishLocation: 'Container'

# ===========================
# NOTE: Azure deployment stages removed
# ===========================
# This pipeline now only handles build and code quality validation.
# Deployment is handled separately (Railway, manual deployment, etc.)
#
# If you need Azure deployment in the future, you can:
# 1. Set up an Azure Service Connection in Azure DevOps
# 2. Configure the required pipeline variables (AzureSubscription, etc.)
# 3. Re-enable the deployment stages below
# ===========================

# ===========================
# Stage 6: Code Quality (runs in parallel)
# ===========================
- stage: CodeQuality
  displayName: 'Code Quality'
  dependsOn: []
  jobs:
  - job: DotNetCodeAnalysis
    displayName: '.NET Code Analysis'
    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET SDK'
      inputs:
        version: $(dotnetSdkVersion)

    - task: DotNetCoreCLI@2
      displayName: 'Restore packages'
      inputs:
        command: 'restore'

    - script: |
        dotnet format --verify-no-changes --no-restore
      displayName: 'Check code formatting'
      continueOnError: true

    - task: DotNetCoreCLI@2
      displayName: 'Build with warnings as errors'
      inputs:
        command: 'build'
        arguments: '--no-restore -warnaserror'
      continueOnError: true

  - job: ReactCodeAnalysis
    displayName: 'React Code Analysis'
    steps:
    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSpec: $(nodeVersion)

    - script: |
        cd web
        npm ci
      displayName: 'Install dependencies'

    - script: |
        cd web
        npm run lint
      displayName: 'Run ESLint'
      continueOnError: true

    - script: |
        cd web
        npm run type-check
      displayName: 'TypeScript type check'
      continueOnError: true
